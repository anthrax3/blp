#!/bin/bash/env bash

############ 
# @pkg file.blib 
# @pkgdescr Support library for the (disk, mem, & sys) check applications
# @version 2.0
# @membership blib
#
# Using the following param will tell INSTALL where this file should be installed.
# Of course I haven't written INSTALL yet so that wont happen...;-P
#
# @install /usr/local/lib/
# installation- 
# 
# run file- /usr/local/bin
# blib files- /usr/local/lib/blib
# app blib files- /usr/local/lib
# config files- /usr/local/etc
#
#
# @author Mikel King <mikel.king@olivent.com> 
# @copyright 2012 Olivent Technologies, llc
# @license http://opensource.org/licenses/bsd-license.php New/Simplified BSD License
# @todo most of these functions are logging related so they should be merged into the logging.blib system.




# @note The following are likely to be relocated to other blib files as thehy are hold overs from the original dupe & revise scheme. As part of the regorganization many of these functions will be moved and consolidated into reasonable common library contatiners.

# @method logSyncProgress
# @descr Once implemented this will force logging of all files processed to syslog. This is a  debugging feature & not yet implemented. *** It is likely to not ever be completed. ***
# @param void | mixed
# @return TRUE | unless otherwise specified
function logSyncProgress() {
	echo ""
}

# @method createFileList
# @descr creates a list of files to be syncd and stores it in file listed
# @global FromFiles
# @todo need to make the -6 entity as a varible and set via confile. This value needs to be verified to always be >= 1 and < the retention date value.
function createFileList() {
	# Attempting to make a temp file....
	logOutput "Generating a list of files."
	find . -type f -mtime -6 > ${FilesFrom}	
}

# @method cleanupFileList
# @descr removes the list of files in the container from the filesystem
# @global FromFiles
function cleanupFileList() {
	logOutput "Cleaning up sync list."
	rm ${FilesFrom}
}

# @method displayFileList
# @descr displays the list of files in the container
# @global FromFiles
function displayFileList() {
	outputMsg ${FilesFrom}
}

# @method getBasePath
# @descr extracts the base directory name
function getBasePath() {
	BasePath=`dirname ${SrcDir}`
}


# @method displayBasePath
# @descr display the base directory name
function displayBasePath() {
	outputMsg "The base source directory is: $BasePath"
}

# @method setBasePath
# @descr changes to basepath & sets the working directory to that name
function setBasePath() {
	cd ${BasePath}
	WorkDir=`basename ${SrcDir}`
}

# @method expungeOpt
# @descr set's the expunge option to TRUE
function expungeOpt(){
	Expunge=${TRUE}
}

# @method expungeFile
# @descr removes PERMANTENTLY a file from the filesystem
# @global $Expunge FALSE | TRUE
# @todo clean up the redundant code blocks & fix the quiet option here
function expungeFile(){
	if [ ${Expunge} -eq ${TRUE} ];
	then
		if [[ ! ${1+isset} = isset ]];
		then
			rm ${File}
			if [ ${QUIET} = ${FALSE} ];
			then
				logOutput "Expunged the file ${File} as commanded."
			fi
		else
			rm ${1}
			if [ ${QUIET} = ${FALSE} ];
			then
					logOutput "Expunged the file ${1} as commanded."
			fi
		fi
	fi
}


# @method processLogFiles
# @descr locates files as specified by the DAY interval then compresses them and removes the original 
function processLogFiles() {
#echo ${Subdir}

#for File in `find ${SrcDir} -type f -mtime +${Interval}`; do
for File in `find ${WorkDir} -type f -mtime +${Interval}`; do

	FileName=`basename ${File} .${Extension}`	# extracts the file name without xml extention
	DirName=`dirname ${File}`	# extracts the directory name
	BaseDirName=`basename ${DirName}`	# extracts the base directory name

	TargetDir=${DestDir}/${BaseDirName}

	Target=${TargetDir}/${FileName}.tbz	

	archiveLogFile "${Target} ${File}"
	rotationCounter
done
}


# @method rotationCounter
# @descr 
function rotationCounter() {
	RotationCount=$((${RotationCount}+1))
}

# @method logRotationCount
# @descr 
function logRotationCount() {
	logOutput "Processed ${RotationCount} files."
}

function archiveLogFile() {
  if [[ ${1+isset} = isset ]];
  then
    Targets=${1}
  fi
	getTarOpts
	verifyTargetDir
	#echo "tar ${TarOpts} ${Targets}"
	Result=$(tar ${TarOpts} ${Targets})
	if [ ${Result} ];
	then
		echo "Error! The log archive rotation failed on ${File}."
	else
		if [ ${Expunge} = ${TRUE} ];
		then
			expungeFile ${File}
		fi
	fi
}

function verifyTargetDir() {
	if [ ! -e ${TargetDir} ];
	then
		#echo "Houston we have a problem. We are unable to acquire the ${Target}...;-S"
		# Atempt to make the directory
		makeTargetDir
	#else
		#echo "Looks like ${Target} has been acquired. Fire in the hold!"
	fi
}

# @method makeTargetDir
# @descr create a destination directory
function makeTargetDir() {
#	echo ${TargetDir}
	mkdir ${TargetDir}
}

# @method getTarOpts
# @descr set the appropriate compression algorythm for tar via CLI options.
function getTarOpts() {
  case $Compression in
  bzip2) TarOpts="cjpf"
  	;;
  gzip) TarOpts="czpf"
  	;;
   esac >&2
}
