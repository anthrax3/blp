#!/bin/bash/env bash

############ 
# string.blp - Support library for the string related functions
#
# installation- /usr/local/lib/blp
# 
# run file- /usr/local/bin
# blp files- /usr/local/lib/blp
# app blp files- /usr/local/lib
# config files- /usr/local/etc
#
# Using the following param will tell INSTALL where this file should be installed.
# Of course I haven't written INSTALL yet so that wont happen...;-P
#
# @install /usr/local/lib/blp
#
# @author Mikel King <mikel.king@olivent.com> 
# @copyright 2012 Olivent Technologies, llc
# @package debug
# @dependency blp
# @version 2.0
# @license http://opensource.org/licenses/bsd-license.php New/Simplified BSD License
# @todo establish better output operations. Currently when in debug mode we just echo. Also need
	# a better method to enable debug.


# Some of the string functions can be found at: http://ghostdog74.livejournal.com/46902.html
# Others are original. Eventually I will re-craft any borrowed functions to create a free standing lib.

function uc(){
    case "$1" in
        [a-z])
        n=$(printf "%d" "'$1")
        n=$((n-32))
        printf \\$(printf "%o" $n)
    esac
}

function  lc(){
    case "$1" in
        [A-Z])
        n=$(printf "%d" "'$1")
        n=$((n+32))
        printf \\$(printf "%o" $n)
    esac
}

# Raise the first character to upper case
function fuc(){
WORD=$(uc "${1:0:1}")${1:1}
echo ${WORD}
}

# Drop the first character to lower case
function flc(){
WORD=$(lc "${1:0:1}")${1:1}
echo ${WORD}
}

function getFirstChar(){
    case "$1" in
        [a-z])
        n=$(printf "%d" "'$1")
        n=$((n))
        printf \\$(printf "%o" $n)
    esac

}


function bracketFc() {
#Result="$(printf "[%s]%s" $( getFirstChar "${1:0:1}") ${1:1})""
Result="\0133$( getFirstChar "${1:0:1}")\0135${1:1}"
#echo ${Result}
}

# trims off the last or n character(s) from the end of a string. It's good for removing punctuation.
# @method trimString  
# @param string $1	***required
# @param value $2	***optional
# @return string =$(trimString)
function trimString() {

	if [[ ${2+isset} = isset ]];
	then
		Blade=${2}
	else
		Blade=1
	fi

	if [[ ${1+isset} = isset ]];
	then
		local _Length=${#1}
	else
		# Will decide the exception level later
		throw 3
	fi
	
	if [ ${Blade} -lt ${_Length} ];
	then
		local _Cut=$((${#1}-${Blade}))

		Slice=${1:0:${_Cut}}
			echo ${Slice}

	else
		# Will decide the exception level later
		throw 3
		#echo "break point"
	fi
}


SrvcName=${MyName}
LongName=$(fuc ${SrvcName})

